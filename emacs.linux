(set-language-environment "Chinese-GB")

(add-to-list 'load-path (expand-file-name "~/.emacs.d"))

(server-start)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; no tool bar
(tool-bar-mode nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; highlight match parenthsis
(show-paren-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; title show file path
(setq frame-title-format
          '("emacs@:%f" (dired-directory dired-directory "")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ediff no float frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; highlight yaml mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; backup file directory
(setq backup-directory-alist '(("." . "/tmp")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; markdown supported
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  remap key C-z, because it's no use under X
;;
(define-prefix-command 'ctl-z-map)
(global-set-key (kbd "C-z") 'ctl-z-map)
(global-set-key "\C-z\C-d" 'fjq-insert-datetime)
;(define-key ctl-z-map (kbd "d") 'fjq-insert-datetime)
(global-set-key (kbd "\C-zs") (quote copy-string))
(global-set-key (kbd "\C-z\C-a") 'copy-line)
(global-set-key (kbd "C-o") 'other-window)
(global-set-key (kbd "M-g") 'goto-line)

(defun fjq-insert-datetime ()
"insert current data after current point. By fjq"
    (interactive)
    (insert (format-time-string "%Y-%m-%d %H:%M")))

;;;;;;;; fast copy key stroke
(defun copy-string (&optional arg)
  "Copy a sequence of string into kill-ring"
  (interactive)
  (setq onPoint (point))
  ( setq delimiter "[\t :()]")
  (let (( beg (progn (re-search-backward delimiter (line-beginning-position) 3 1)
         (if (looking-at delimiter) (+ (point) 1) (point) )))
        ( end  (progn  (goto-char onPoint) (re-search-forward delimiter (line-end-position) 3 1)
           (if (looking-back delimiter) (- (point) 1) (point) ) )))
    (copy-region-as-kill beg end)))

(defun copy-line (&optional arg)
 "Save current line into Kill-Ring without mark the line"
 (interactive "P")
 (let ((beg (line-beginning-position))
       (end (line-end-position arg)))
 (copy-region-as-kill beg end))
)
(defun copy-word (&optional arg)
  "Copy words at point"
  (interactive "P")
    (let ((beg (progn (if (looking-back "[a-zA-Z0-9]" 1) (backward-word 1)) (point)))
      (end (progn (forward-word arg) (point))))
      (copy-region-as-kill beg end))
)

;;;; This snippet enables lua-mode
;; This line is not necessary, if lua-mode.el is already on your load-path
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
;; set TAGS file
;(setq tags-file-name "~/work/guardian/ngx_proxy/TAGS")

;; ido for buffer switch
(require 'ido)
(ido-mode t)
(global-set-key (kbd "<backtab>") 'ido-switch-buffer) ; shitf-tab
(global-set-key [f5] 'ido-switch-buffer)
(global-set-key [f6] 'ido-find-file)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; show file&dir of buffer in title
(setq frame-title-format
          '("emacs@:%f" (dired-directory dired-directory "")))

;;;;;;;;;;;;;;;;;;;;;;;;;; windows move up / down
(defun window-move-up (&optional arg)
  "Current window move-up 2 lines."
  (interactive "P")
  (if arg
          (scroll-up arg)
        (scroll-up 2)))

(defun window-move-down (&optional arg)
  "Current window move-down 3 lines."
  (interactive "P")
  (if arg
          (scroll-down arg)
        (scroll-down 3)))

(defun other-window-move-up (&optional arg)
  "Other window move-up 1 lines."
  (interactive "p")
  (scroll-other-window arg))

(defun other-window-move-down (&optional arg)
  "Other window move-down 2 lines."
  (interactive "P")
  (if arg
          (scroll-other-window-down arg)
        (scroll-other-window-down 2)))
(global-set-key [(meta n)] 'window-move-up)
(global-set-key [(meta p)] 'window-move-down)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;git-emacs
(add-to-list 'load-path "~/.emacs.d/git-emacs/")
(require 'git-emacs)

;; color theme
(require 'color-theme)
(color-theme-initialize)
;; Blackboard Colour Theme for Emacs.
;;
;; Defines a colour scheme resembling that of the original TextMate Blackboard colour theme.
;; To use add the following to your .emacs file (requires the color-theme package):
;;
;; (require 'color-theme)
;; (color-theme-initialize)
;; (load-file "~/.emacs.d/themes/color-theme-blackboard.el")
;;
;; And then (color-theme-blackboard) to activate it.
;;
;; MIT License Copyright (c) 2008 JD Huntington 
;; Credits due to the excellent TextMate Blackboard theme
;;
;; All patches welcome
 
(defun color-theme-blackboard ()
  "Color theme by JD Huntington, based off the TextMate Blackboard theme, created 2008-11-27"
  (interactive)
  (color-theme-install
   '(color-theme-blackboard
     (
      ;; (background-color . "#0C1021")
      (background-color . "black")
      (background-mode . dark)
      (border-color . "black")
      (cursor-color . "#A7A7A7")
      ;(foreground-color . "#F8F8F8")
      (foreground-color . "#B0B0B0")
      (mouse-color . "sienna1"))
     ;; (default ((t (:background "#0C1021" :foreground "#F8F8F8"))))
     ;; (default ((t (:background "black" :foreground "#F8F8F8"))))
	 (default ((t (:background "black" :foreground "#808080"))))
     (blue ((t (:foreground "blue"))))
     (bold ((t (:bold t))))
     (bold-italic ((t (:bold t))))
     (border-glyph ((t (nil))))
     (buffers-tab ((t (:background "#0C1021" :foreground "#F8F8F8"))))
     (font-lock-builtin-face ((t (:foreground "#F8F8F8"))))
     (font-lock-comment-face ((t (:italic t :foreground "#AEAEAE"))))
     (font-lock-constant-face ((t (:foreground "#D8FA3C"))))
     (font-lock-doc-string-face ((t (:foreground "DarkOrange"))))
     (font-lock-function-name-face ((t (:foreground "#FF6400"))))
     (font-lock-keyword-face ((t (:foreground "#FBDE2D"))))
     (font-lock-preprocessor-face ((t (:foreground "Aquamarine"))))
     (font-lock-reference-face ((t (:foreground "SlateBlue"))))
 
     (font-lock-regexp-grouping-backslash ((t (:foreground "#E9C062"))))
     (font-lock-regexp-grouping-construct ((t (:foreground "red"))))
 
     (font-lock-string-face ((t (:foreground "#61CE3C"))))
     (font-lock-type-face ((t (:foreground "#8DA6CE"))))
     ;(font-lock-variable-name-face ((t (:foreground "#FF6400"))))
     (font-lock-variable-name-face ((t (:foreground "#40E0D0"))))
     (font-lock-warning-face ((t (:bold t :foreground "Pink"))))
     (gui-element ((t (:background "#D4D0C8" :foreground "black"))))
     (region ((t (:background "#253B76"))))
     (mode-line ((t (:background "grey75" :foreground "black"))))
     ;(highlight ((t (:background "#222222"))))
     (highlight ((t (:background "#001"))))
     (highline-face ((t (:background "SeaGreen"))))
     (italic ((t (nil))))
     (left-margin ((t (nil))))
     (text-cursor ((t (:background "yellow" :foreground "black"))))
     (toolbar ((t (nil))))
     (underline ((nil (:underline nil))))
     (zmacs-region ((t (:background "snow" :foreground "ble")))))))
(color-theme-blackboard)
;(color-theme-gnome2)
;(color-theme-lethe)
;(color-theme-clarity)

;;;;;;;; jdee java ide
(add-to-list 'load-path "~/.emacs.d/jdee-2.4.1/lisp")
(load "jde")
;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; '(jde-jdk (quote ("1.8.0")))
; '(jde-jdk-registry (quote (("1.8.0" . "/usr/java/jdk1.8.0_71")))))
;(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; )
(setq jde-enable-abbrev-mode t)
(jde-gen-define-abbrev-template "melse" '('> "else {" '> 'n
	  '> 'r 'n "}"))
(jde-gen-define-abbrev-template "sout" '('> "System.out.println(\"\");"))
(jde-gen-define-abbrev-template "souf" '('> "System.out.print(\"\");"))
(jde-gen-define-abbrev-template "psvm" '('> "public static void main(String[] args) {" 'n 'n "}"))

;; sort file in dired
(defun xah-dired-sort ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2015-07-30"
  (interactive)
  (let (-sort-by -arg)
    (setq -sort-by (ido-completing-read "Sort by:" '( "date" "size" "name" "dir")))
    (cond
     ((equal -sort-by "name") (setq -arg "-Al --si --time-style long-iso "))
     ((equal -sort-by "date") (setq -arg "-Al --si --time-style long-iso -t"))
     ((equal -sort-by "size") (setq -arg "-Al --si --time-style long-iso -S"))
     ((equal -sort-by "dir") (setq -arg "-Al --si --time-style long-iso --group-directories-first"))
     (t (error "logic error 09535" )))
    (dired-sort-other -arg )))


(add-to-list 'load-path "~/.emacs.d/auto-complete-master")
(add-to-list 'load-path "~/.emacs.d/popup-el-master")
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

(add-to-list 'load-path "~/.emacs.d/yasnippet-master")
(require 'yasnippet)
(yas-global-mode 1)


;(setq url-proxy-services '(("no_proxy" . "work\\.com")
;                           ("http" . "cn-proxy.jp.oracle.com:80")))

;;;;;;;; cedet settings
(global-ede-mode 1)
(require 'semantic/sb)
(global-semantic-mru-bookmark-mode)
(semantic-mode 1)
(which-function-mode)  ; show current function name on mode line
;;;;;;;; add c++ std headers
(setq include-dirs ())
(defconst cedet-linux-include-dirs
  (list "/usr/include/c++/4.8/"))
(setq include-dirs (append include-dirs cedet-linux-include-dirs))
(mapc (lambda (dir)
  (semantic-add-system-include dir 'c++-mode))
  include-dirs)
(global-set-key (kbd "\C-c-") 'senator-fold-tag)
(global-set-key (kbd "\C-c+") 'senator-unfold-tag)
;(global-set-key (kbd "\C-j") 'next-buffer)
(put 'narrow-to-region 'disabled nil)

;; enable code in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (emacs-lisp . t)
   (python . t)
   (sh . t)
   (C . t)
   (C++ . t)
   (java . t)
   ))
;; all python code be safe
(defun my-org-confirm-babel-evaluate (lang body)
  (not (or (string= lang "cpp") (string= lang "python") (string= lang "C") (string= lang "java"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
(setq org-src-fontify-natively t)

